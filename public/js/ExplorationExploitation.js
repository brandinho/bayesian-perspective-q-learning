import {
  norm_pdf
} from './rand';

export function plotExplorationExploitation(movingDistColor, barFillColor, fixedDistColor) {
  function getTextWidth(text, font) {
    var canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement("canvas"));
    var context = canvas.getContext("2d");
    context.font = font;
    var metrics = context.measureText(text);
    return metrics.width;
  }

  //Set dimensions
  const textFont = "bold 12pt arial"
  , probAboveText = "Probability Above"
  , probAboveTextWidth = getTextWidth(probAboveText, textFont)
  , probJointText = "Joint Density"
  , probJointTextWidth = getTextWidth(probJointText, textFont)
  , maxProbTextWidth = d3.max([probAboveTextWidth, probJointTextWidth])
  , textWidthDiff = maxProbTextWidth - d3.min([probAboveTextWidth, probJointTextWidth])

  var leftMargin = 20
  , distributionHeight = parseInt(d3.select(".exploration-exploitation").style("height"))
  , distributionWidth = parseInt(d3.select("#distributionsExplorationExploitation").style("width"))
  , probBarHeight = parseInt(d3.select(".probability-bar").style("height"))
  , probBarWidth = parseInt(d3.select(".probability-bar").style("width")) - leftMargin - maxProbTextWidth
  , mu = +d3.select("#sliderExplorationExploitation").attr("value")
  , sigma = 1
  , fixed_mu = 0
  , fixed_sigma = 1
  , upper_range = 10
  , lower_range = -upper_range
  , upper_bound = upper_range + fixed_sigma * 4
  , lower_bound = lower_range - fixed_sigma * 4
  , barRangeY = 10;

  document.querySelector('label[for="barExplorationExploitation"] span').innerHTML = mu;

  function generate_norm_pdf_curve(mu, sigma) {
    var normal_distribution = []
    for (var i = mu - sigma * 4; i < mu + sigma * 4; i += 0.05) {
      normal_distribution.push({
          mu: i,
          density: norm_pdf(i, mu, sigma)
      })
    }
    return normal_distribution
  }

  function makeVerticalLine(barLevel) {
    const barLevelData = []
    for (var i = 0; i <= barRangeY; i++) {
      barLevelData.push({
        x: barLevel,
        y: i,
      })
    }
    return barLevelData
  }

  // Generate Data
  var moving_norm_dist = generate_norm_pdf_curve(mu, sigma);
  var fixed_norm_dist = generate_norm_pdf_curve(fixed_mu, fixed_sigma);

  // Axes and scales
  var xPDF = d3.scaleLinear().domain([lower_bound, upper_bound]).range([0, distributionWidth]);
  var xBar = d3.scaleLinear().domain([0, 1]).range([0, probBarWidth]);

  var yPDF = d3.scaleLinear().domain([0, d3.max(fixed_norm_dist, function(d) {return d.density})]).range([distributionHeight, 0]);
  var yBar = d3.scaleLinear().domain([0, barRangeY]).range([probBarHeight, 0]);

  var xAxisPDF = d3.axisBottom(xPDF);
  var xAxisBar = d3.axisBottom(xBar);

  var yAxisPDF = d3.axisLeft(yPDF);
  var yAxisBar = d3.axisLeft(yBar);

  //Draw svg
  var svgDistributions = d3.select("#distributionsExplorationExploitation").append("svg")
            .attr("width", distributionWidth)
            .attr("height", distributionHeight)
            .attr("style", "border-bottom: 1.5px solid grey;");

  var svgProbAbove = d3.select("#probAboveExplorationExploitation").append("svg")
            .attr("width", probBarWidth + leftMargin + maxProbTextWidth)
            .attr("height", probBarHeight)
            .append("g")
            .attr("transform", `translate(${leftMargin + maxProbTextWidth},${0})`);

  svgProbAbove.append("g")
    .append("text")
    .attr("transform", `translate(${-leftMargin - maxProbTextWidth},${0})`)
    .attr("y", probBarHeight * 0.75)
    .style("font", textFont)
    .style("text-anchor", "start")
    .text(probAboveText)

  var rectProbAbove = svgProbAbove.append("rect")
            .attr("width", probBarWidth)
            .attr("height", probBarHeight)
            .style("fill", "none")
            .style("stroke", "grey")
            .style("stroke-width", "2px")

  var svgProbJoint = d3.select("#probJointExplorationExploitation").append("svg")
            .attr("width", probBarWidth + leftMargin + maxProbTextWidth)
            .attr("height", probBarHeight)
            .append("g")
            .attr("transform", `translate(${leftMargin + maxProbTextWidth},${0})`);

  svgProbJoint.append("g")
    .append("text")
    .attr("transform", `translate(${-leftMargin - maxProbTextWidth},${0})`)
    .attr("y", probBarHeight * 0.75)
    .style("font", textFont)
    .style("text-anchor", "start")
    .text(probJointText)

  var rectProbJoint = svgProbJoint.append("rect")
            .attr("width", probBarWidth)
            .attr("height", probBarHeight)
            .style("fill", "none")
            .style("stroke", "grey")
            .style("stroke-width", "2px")


  //Draw CDF line
  var guidePDF = d3.area()
              .x(function(d){ return xPDF(d.mu) })
              .y0(distributionHeight)
              .y1(function(d){ return yPDF(d.density) })
              .curve(d3.curveBasis);

  var guideBarArea = d3.area()
              .x0(0)
              .x1(function(d){ return xBar(d.x) })
              .y(function(d){ return yBar(d.y) })
              .curve(d3.curveBasis);
  var guideBarLine = d3.line()
              .x(function(d){ return xBar(d.x) })
              .y(function(d){ return yBar(d.y) })
              .curve(d3.curveBasis);

  Promise.all([
    d3.json("data/exploration_exploitation.json")
  ]).then(exploration_exploitation => {
    const tradeoff = exploration_exploitation[0]
    var barLevelAbove = tradeoff[`${mu}`].probability_above
    var barLevelOverlap = tradeoff[`${mu}`].probability_overlap
    var barLevelAboveData = makeVerticalLine(barLevelAbove)
    var barLevelOverlapData = makeVerticalLine(barLevelOverlap)

    var movingPDF = svgDistributions.append('path')
                .datum(moving_norm_dist)
                .attr('d', guidePDF)
                .style('stroke', movingDistColor)
                .style('fill', movingDistColor)
                .style('fill-opacity', 0.3)
                .attr('class', 'line');
    var fixedPDF = svgDistributions.append('path')
                .datum(fixed_norm_dist)
                .attr('d', guidePDF)
                .style('stroke', fixedDistColor)
                .style('fill', fixedDistColor)
                .style('fill-opacity', 0.3)
                .attr('class', 'line');

    var barAboveArea = svgProbAbove.append('path')
                .datum(barLevelAboveData)
                .attr('d', guideBarArea)
                .style('fill', barFillColor)
                .style('fill-opacity', 0.5);
    var barAboveLine = svgProbAbove.append('path')
                .datum(barLevelAboveData)
                .attr('d', guideBarLine)
                .style('stroke', barFillColor)
                .style('stroke-width', 4)
                .attr('class', 'line');

    var barOverlapArea = svgProbJoint.append('path')
                .datum(barLevelOverlapData)
                .attr('d', guideBarArea)
                .style('fill', barFillColor)
                .style('fill-opacity', 0.5);
    var barOverlapLine = svgProbJoint.append('path')
                .datum(barLevelOverlapData)
                .attr('d', guideBarLine)
                .style('stroke', barFillColor)
                .style('stroke-width', 4)
                .attr('class', 'line');

    function updateCharts() {
      moving_norm_dist = generate_norm_pdf_curve(mu, sigma);
      barLevelAbove = tradeoff[`${mu}`].probability_above
      barLevelOverlap = tradeoff[`${mu}`].probability_overlap
      barLevelAboveData = makeVerticalLine(barLevelAbove)
      barLevelOverlapData = makeVerticalLine(barLevelOverlap)

      movingPDF.remove()
      barAboveArea.remove()
      barAboveLine.remove()
      barOverlapArea.remove()
      barOverlapLine.remove()
      movingPDF = svgDistributions.append('path')
                  .datum(moving_norm_dist)
                  .attr('d', guidePDF)
                  .style('stroke', movingDistColor)
                  .style('fill', movingDistColor)
                  .style('fill-opacity', 0.3)
                  .attr('class', 'line');
      barAboveArea = svgProbAbove.append('path')
                  .datum(barLevelAboveData)
                  .attr('d', guideBarArea)
                  .style('fill', barFillColor)
                  .style('fill-opacity', 0.5);
      barAboveLine = svgProbAbove.append('path')
                  .datum(barLevelAboveData)
                  .attr('d', guideBarLine)
                  .style('stroke', barFillColor)
                  .style('stroke-width', 4)
                  .attr('class', 'line');
      barOverlapArea = svgProbJoint.append('path')
                  .datum(barLevelOverlapData)
                  .attr('d', guideBarArea)
                  .style('fill', barFillColor)
                  .style('fill-opacity', 0.5);
      barOverlapLine = svgProbJoint.append('path')
                  .datum(barLevelOverlapData)
                  .attr('d', guideBarLine)
                  .style('stroke', barFillColor)
                  .style('stroke-width', 4)
                  .attr('class', 'line');
    }

    d3.select("#sliderExplorationExploitation").on("input", function(d){
      mu = +this.value
      document.querySelector('label[for="barExplorationExploitation"] span').innerHTML = mu;
      updateCharts()
    })

  });
}
