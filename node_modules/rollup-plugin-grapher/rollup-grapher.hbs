<!DOCTYPE html>
<meta charset="utf-8">
<script src="https://d3js.org/d3.v4.js" charset="utf-8"></script>
<!-- <script src="https://d3js.org/d3.v4.min.js" charset="utf-8"></script> -->
<style>

.node {
	stroke: #fff;
	stroke-width: 1.5px;
}

.link {
	stroke: #999;
	stroke-opacity: 1;
	fill: none;
}

text {
	fill: #000;
	stroke-width: 0;
	font: 10px sans-serif;
	pointer-events: none;
}

svg {
	width: 100vw;
	height: 100vh;
}

body {
	margin: 0;
	padding: 0;
	overflow: hidden;
}



</style>
<body>
<svg></svg>
<script>

var links = {{{ links }}};
var nodes = {{{ nodes }}};

// console.log('Links: ', links);
// console.log('Link 1: ', links[0]);
// console.log('Nodes: ', nodes);
// console.log('Node 1: ', nodes[0]);
// console.log('Node 2: ', nodes[1]);
// console.log('Node 3: ', nodes[2]);
// console.log('Node 4: ', nodes[3]);



var svg = d3.select("svg"),
    width = window.innerWidth,
    height = window.innerHeight;

var color = d3.scaleOrdinal(d3.schemeCategory20);

var simulation = d3.forceSimulation()
    .force("link", d3.forceLink().distance(Math.min(width, height) / 5).strength(0.25))
    .force("charge", d3.forceManyBody())
    .force("center", d3.forceCenter(width / 2, height / 2));

svg.append("svg:defs").selectAll("marker")
	.data(["end"])
	.enter().append("svg:marker")
	.attr("id", String)
	.attr("viewBox", "0 -5 10 10")
	.attr("refX", 15)
	.attr("refY", -1.5)
	.attr("markerWidth", 8)
	.attr("markerHeight", 8)
	.attr("orient", "auto")
	.append("svg:path")
	.attr("d", "M0,-5L10,0L0,5");

  var nodeById = d3.map(nodes, function(d) { return d.id; }),
      bilinks = [];

  links.forEach(function(link) {
    var s = link.source = nodeById.get(link.source),
        t = link.target = nodeById.get(link.target),
        i = {}; // intermediate node
    nodes.push(i);
    links.push({source: s, target: i}, {source: i, target: t});
    bilinks.push([s, i, t]);
  });

  var link = svg.selectAll(".link")
    .data(bilinks)
    .enter().append("path")
	.attr("class", "link")
	.attr("marker-end", "url(#end)");	// arrowhead
;

var node = svg.selectAll(".node")
	.data(nodes.filter(function(d) { return d.id; }))
	.enter()
	.append('g')
	.call(d3.drag()
		.on("start", dragstarted)
		.on("drag", dragged)
		.on("end", dragended)
	);

node.append("circle")
	.attr("class", "node")
	.attr("r", 5)
	.attr("fill", function(d) { return color(d.group); });

node.append("title")
	.text(function(d) { return d.id; });

node.append("text")
	.attr("x", 12)
	.attr("dy", ".35em")
	.text(function(d) { return d.id; });


  simulation
      .nodes(nodes)
      .on("tick", ticked);

  simulation.force("link")
      .links(links);

  function ticked() {
    link.attr("d", positionLink);
    node.attr("transform", positionNode);
  }




function positionLink(d) {
  return "M" + d[0].x + "," + d[0].y
       + "S" + d[1].x + "," + d[1].y
       + " " + d[2].x + "," + d[2].y;
}

function positionNode(d) {
  return "translate(" + d.x + "," + d.y + ")";
}

function dragstarted(d) {
  if (!d3.event.active) simulation.alphaTarget(0.3).restart();
  d.fx = d.x, d.fy = d.y;
}

function dragged(d) {
  d.fx = d3.event.x, d.fy = d3.event.y;
}

function dragended(d) {
//   if (!d3.event.active) simulation.alphaTarget(0);
  d.fx = null, d.fy = null;
}






</script>
</body>
</html>
